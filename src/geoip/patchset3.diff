--- ./apps/geoiplookup.c	2011-06-23 15:18:32.000000000 -0500
+++ ./apps/geoiplookup.c	2012-04-13 10:14:41.000000000 -0500
@@ -40,6 +40,7 @@
 int main (int argc, char *argv[]) {
 	char * hostname = NULL;
 	char * db_info;
+	const GeoIPDB * pdb = NULL;
 	GeoIP * gi;
 	int i;
 	char *custom_directory = NULL;
@@ -76,10 +77,7 @@
 		exit(1);
 	}
 
-	if (custom_directory != NULL) {
-		GeoIP_setup_custom_directory(custom_directory);
-	}
-	_GeoIP_setup_dbfilename();
+	pdb = GeoIP_setup_custom_directory(custom_directory);
 
 	if (custom_file != NULL) {
 		gi = GeoIP_open(custom_file, GEOIP_STANDARD);
@@ -100,8 +98,8 @@
 	} else {
 		/* iterate through different database types */
 		for (i = 0; i < NUM_DB_TYPES; ++i) {
-			if (GeoIP_db_avail(i)) {
-				gi = GeoIP_open_type(i, GEOIP_STANDARD);
+			if (GeoIP_db_avail(pdb,i)) {
+				gi = GeoIP_open_type(pdb,i, GEOIP_STANDARD);
 				if (NULL == gi) {
 					printf("%s not available, skipping...\n", GeoIPDBDescription[i]);
 				} else {
--- ./apps/geoiplookup6.c	2011-06-23 15:18:32.000000000 -0500
+++ ./apps/geoiplookup6.c	2012-05-20 00:00:55.000000000 -0500
@@ -30,6 +30,7 @@
 int main (int argc, char *argv[]) {
 	char * hostname = NULL;
 	char * db_info;
+	const GeoIPDB * pdb = NULL;
 	GeoIP * gi;
 	int i;
 	char *custom_directory = NULL;
@@ -64,10 +65,7 @@
 		exit(1);
 	}
 
-	if (custom_directory != NULL) {
-		GeoIP_setup_custom_directory(custom_directory);
-	}
-	_GeoIP_setup_dbfilename();
+	pdb = GeoIP_setup_custom_directory(custom_directory);
 
 	if (custom_file != NULL) {
 		gi = GeoIP_open(custom_file, GEOIP_STANDARD);
@@ -87,8 +85,8 @@
 	} else {
 		/* iterate through different database types */
 		for (i = 0; i < NUM_DB_TYPES; ++i) {
-			if (GeoIP_db_avail(i)) {
-				gi = GeoIP_open_type(i, GEOIP_STANDARD);
+			if (GeoIP_db_avail(pdb,i)) {
+				gi = GeoIP_open_type(pdb,i, GEOIP_STANDARD);
 				if (NULL == gi) {
 					printf("%s not available, skipping...\n", GeoIPDBDescription[i]);
 				} else {
@@ -116,13 +114,15 @@
 {
 	const char     *country_code;
 	const char     *country_name;
-	const char     *domain_name;
         const char     *asnum_name;        
-	int             netspeed;
+	GeoIPRecord    *gir;
 	int             country_id;
+#if 0
+	const char     *domain_name;
+	int             netspeed;
 	GeoIPRegion    *region;
-	GeoIPRecord    *gir;
 	const char     *org;
+#endif
 
 	geoipv6_t       ipnum;
 	ipnum = _GeoIP_lookupaddress_v6(hostname);
--- ./apps/geoipupdate.c	2011-06-23 15:18:32.000000000 -0500
+++ ./apps/geoipupdate.c	2012-04-13 15:08:52.000000000 -0500
@@ -86,6 +86,7 @@
 	int c;
 	int err = 0;
 	int i;
+	const GeoIPDB *pdb = NULL;
 
 	opterr = 0;
 
@@ -116,9 +117,8 @@
 			abort();
 		}
 
-	if (custom_directory != NULL) {
-		GeoIP_setup_custom_directory(custom_directory);
-	}
+	pdb = GeoIP_setup_custom_directory(custom_directory);
+
 	if (license_file == NULL) {
 		license_file = malloc(sizeof(char) * (strlen(SYSCONFDIR)+strlen(GeoIPConfFile)+2));
 		license_file[0] = '\0';
@@ -250,13 +250,13 @@
 		/* update the databases using the user id string, the license key string and the product id for each database */
 		client_ipaddr = NULL;
 		for (i = 0; i < num_product_ids; i++) {
-			err = GeoIP_update_database_general(the_user_id_str, the_license_key_str, the_product_id_str[i], verbose,&client_ipaddr, &my_printf);
+			err = GeoIP_update_database_general(pdb,the_user_id_str, the_license_key_str, the_product_id_str[i], verbose,&client_ipaddr, &my_printf);
 			print_status(err, license_file);
 		}
 	} else {
 		/* Old format with just license key for MaxMind GeoIP Country database updates 
 		 * here for backwards compatibility */
-		err = GeoIP_update_database(the_license_key_str, verbose, &my_printf);
+		err = GeoIP_update_database(pdb,the_license_key_str, verbose, &my_printf);
 		print_status(err, license_file);
 	}
 
--- ./ChangeLog	2011-06-24 08:44:56.000000000 -0500
+++ ./ChangeLog	2012-05-19 23:53:54.000000000 -0500
@@ -1,3 +1,18 @@
+1.4.8 modified by Neal Horman 2012
+	* Make it compile on FreeBSD by renaming locally provided MD5 implementation to MD5_local so as to not conflict with system provided MD5 implementation
+	* Change all malloc() calls to calloc() to ensure zeroed data structures. (solved a segfault)
+	* Remove library globals and place them into GeoIPDB structure, requiring signature changes to;
+		. GeoIP_setup_custom_dictionary()
+		. GeoIP_db_avail()
+		. GeoIP_open_type()
+		. GeoIP_new()
+		. GeoIP_cleanup()
+		. GeoIP_update_database()
+		. GeoIP_update_database_general()
+	* Signature change to allow root database path specification
+		. _GeoIP_full_path_to()
+	* Change all libGeoIP error printf() calls to fprintf(stderr,..) calls so that true data output can be captured separate from error output
+	* Quell compiler warnings in geoiplookup6
 1.4.8
 	* Fix GEOIP_DOMAIN_EDITION_V6 ( Boris Zentner )
 	* Add new Datatypes GEOIP_NETSPEED_EDITION_REV1_V6 and
Files ./data/GeoIP.dat and ./data/GeoIP.dat differ
--- ./libGeoIP/GeoIP.c	2011-06-23 15:28:07.000000000 -0500
+++ ./libGeoIP/GeoIP.c	2012-04-13 15:26:06.000000000 -0500
@@ -19,6 +19,7 @@
  */
 
 #include "GeoIP.h"
+#include "GeoIP_internal.h"
 
 static geoipv6_t IPV6_NULL;
 
@@ -332,20 +333,16 @@
   "GeoIP Netspeed Edition V6, Rev1"
 };
 
-char * custom_directory = NULL;
+#define GEOIP_MAXPATHFILENAMESIZE 1024
 
-void GeoIP_setup_custom_directory (char * dir) {
-	custom_directory = dir;
-}
-
-char *_GeoIP_full_path_to(const char *file_name) {
+char *_GeoIP_full_path_to(const char * custom_directory, const char *file_name)
+{
 	int len;
-	char *path = malloc(sizeof(char) * 1024);
+	char *path = calloc(1,sizeof(char) * GEOIP_MAXPATHFILENAMESIZE);
 
 	if (custom_directory == NULL){
 #if !defined(_WIN32)
-		memset(path, 0, sizeof(char) * 1024);
-		snprintf(path, sizeof(char) * 1024 - 1, "%s/%s", GEOIPDATADIR, file_name);
+		snprintf(path, sizeof(char) * GEOIP_MAXPATHFILENAMESIZE - 1, "%s/%s", GEOIPDATADIR, file_name);
 #else
 		char buf[MAX_PATH], *p, *q = NULL;
 		memset(buf, 0, sizeof(buf));
@@ -359,65 +356,79 @@
 						*p = '/';
 				}
 		*q = 0;
-		memset(path, 0, sizeof(char) * 1024);
-		snprintf(path, sizeof(char) * 1024 - 1, "%s/%s", buf, file_name);
+		snprintf(path, sizeof(char) * GEOIP_MAXPATHFILENAMESIZE - 1, "%s/%s", buf, file_name);
 #endif
 	} else {
 		len = strlen(custom_directory);
 		if (custom_directory[len-1] != '/') {
-			snprintf(path, sizeof(char) * 1024 - 1, "%s/%s",custom_directory, file_name);
+			snprintf(path, sizeof(char) * GEOIP_MAXPATHFILENAMESIZE - 1, "%s/%s",custom_directory, file_name);
 		} else {
-			snprintf(path, sizeof(char) * 1024 - 1, "%s%s", custom_directory, file_name);
+			snprintf(path, sizeof(char) * GEOIP_MAXPATHFILENAMESIZE - 1, "%s%s", custom_directory, file_name);
 		}
 	}
 	return path;
 }
 
-char ** GeoIPDBFileName = NULL;
+const GeoIPDB * _GeoIP_setup_dbfilename(GeoIPDB *pdb)
+{
+	if(pdb != NULL)
+	{	char ** GeoIPDBFileName = calloc(1,sizeof(char *) * NUM_DB_TYPES);
 
-void _GeoIP_setup_dbfilename() {
-	if (NULL == GeoIPDBFileName) {
-		GeoIPDBFileName = malloc(sizeof(char *) * NUM_DB_TYPES);
-		memset(GeoIPDBFileName, 0, sizeof(char *) * NUM_DB_TYPES);
-
-		GeoIPDBFileName[GEOIP_COUNTRY_EDITION]		= _GeoIP_full_path_to("GeoIP.dat");
-		GeoIPDBFileName[GEOIP_REGION_EDITION_REV0]	= _GeoIP_full_path_to("GeoIPRegion.dat");
-		GeoIPDBFileName[GEOIP_REGION_EDITION_REV1]	= _GeoIP_full_path_to("GeoIPRegion.dat");
-		GeoIPDBFileName[GEOIP_CITY_EDITION_REV0]	= _GeoIP_full_path_to("GeoIPCity.dat");
-		GeoIPDBFileName[GEOIP_CITY_EDITION_REV1]	= _GeoIP_full_path_to("GeoIPCity.dat");
-		GeoIPDBFileName[GEOIP_ISP_EDITION]		= _GeoIP_full_path_to("GeoIPISP.dat");
-		GeoIPDBFileName[GEOIP_ORG_EDITION]		= _GeoIP_full_path_to("GeoIPOrg.dat");
-		GeoIPDBFileName[GEOIP_PROXY_EDITION]		= _GeoIP_full_path_to("GeoIPProxy.dat");
-		GeoIPDBFileName[GEOIP_ASNUM_EDITION]		= _GeoIP_full_path_to("GeoIPASNum.dat");
-		GeoIPDBFileName[GEOIP_NETSPEED_EDITION]		= _GeoIP_full_path_to("GeoIPNetSpeed.dat");
-		GeoIPDBFileName[GEOIP_DOMAIN_EDITION]		= _GeoIP_full_path_to("GeoIPDomain.dat");
-                GeoIPDBFileName[GEOIP_COUNTRY_EDITION_V6]       = _GeoIP_full_path_to("GeoIPv6.dat");
-                GeoIPDBFileName[GEOIP_LOCATIONA_EDITION]        = _GeoIP_full_path_to("GeoIPLocA.dat");
-                GeoIPDBFileName[GEOIP_ACCURACYRADIUS_EDITION]   = _GeoIP_full_path_to("GeoIPDistance.dat");
-                GeoIPDBFileName[GEOIP_CITYCONFIDENCE_EDITION]   = _GeoIP_full_path_to("GeoIPCityConfidence.dat");
-                GeoIPDBFileName[GEOIP_CITYCONFIDENCEDIST_EDITION]     = _GeoIP_full_path_to("GeoIPCityConfidenceDist.dat");
-                GeoIPDBFileName[GEOIP_LARGE_COUNTRY_EDITION]    = _GeoIP_full_path_to("GeoIP.dat");
-                GeoIPDBFileName[GEOIP_LARGE_COUNTRY_EDITION_V6] = _GeoIP_full_path_to("GeoIPv6.dat");
-		GeoIPDBFileName[GEOIP_ASNUM_EDITION_V6]		= _GeoIP_full_path_to("GeoIPASNumv6.dat");
-		GeoIPDBFileName[GEOIP_ISP_EDITION_V6]		= _GeoIP_full_path_to("GeoIPISPv6.dat");
-		GeoIPDBFileName[GEOIP_ORG_EDITION_V6]		= _GeoIP_full_path_to("GeoIPOrgv6.dat");
-		GeoIPDBFileName[GEOIP_DOMAIN_EDITION_V6]	= _GeoIP_full_path_to("GeoIPDomainv6.dat");
-                GeoIPDBFileName[GEOIP_LOCATIONA_EDITION_V6]     = _GeoIP_full_path_to("GeoIPLocAv6.dat");
-                GeoIPDBFileName[GEOIP_REGISTRAR_EDITION]        = _GeoIP_full_path_to("GeoIPRegistrar.dat");
-                GeoIPDBFileName[GEOIP_REGISTRAR_EDITION_V6]     = _GeoIP_full_path_to("GeoIPRegistrarv6.dat");
-                GeoIPDBFileName[GEOIP_USERTYPE_EDITION]         = _GeoIP_full_path_to("GeoIPUserType.dat");
-                GeoIPDBFileName[GEOIP_USERTYPE_EDITION_V6]      = _GeoIP_full_path_to("GeoIPUserTypev6.dat");
-		GeoIPDBFileName[GEOIP_CITY_EDITION_REV0_V6]	= _GeoIP_full_path_to("GeoIPCityv6.dat");
-		GeoIPDBFileName[GEOIP_CITY_EDITION_REV1_V6]	= _GeoIP_full_path_to("GeoIPCityv6.dat");
-		GeoIPDBFileName[GEOIP_NETSPEED_EDITION_REV1]	= _GeoIP_full_path_to("GeoIPNetspeedCell.dat");
-		GeoIPDBFileName[GEOIP_NETSPEED_EDITION_REV1_V6]	= _GeoIP_full_path_to("GeoIPNetseedCellv6.dat");
+		if(GeoIPDBFileName != NULL)
+		{
+			pdb->ppDBFileName = (const char **)GeoIPDBFileName;
+
+			GeoIPDBFileName[GEOIP_COUNTRY_EDITION]		= _GeoIP_full_path_to(pdb->pCustomDir,"GeoIP.dat");
+			GeoIPDBFileName[GEOIP_REGION_EDITION_REV0]	= _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPRegion.dat");
+			GeoIPDBFileName[GEOIP_REGION_EDITION_REV1]	= _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPRegion.dat");
+			GeoIPDBFileName[GEOIP_CITY_EDITION_REV0]	= _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPCity.dat");
+			GeoIPDBFileName[GEOIP_CITY_EDITION_REV1]	= _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPCity.dat");
+			GeoIPDBFileName[GEOIP_ISP_EDITION]		= _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPISP.dat");
+			GeoIPDBFileName[GEOIP_ORG_EDITION]		= _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPOrg.dat");
+			GeoIPDBFileName[GEOIP_PROXY_EDITION]		= _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPProxy.dat");
+			GeoIPDBFileName[GEOIP_ASNUM_EDITION]		= _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPASNum.dat");
+			GeoIPDBFileName[GEOIP_NETSPEED_EDITION]		= _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPNetSpeed.dat");
+			GeoIPDBFileName[GEOIP_DOMAIN_EDITION]		= _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPDomain.dat");
+			GeoIPDBFileName[GEOIP_COUNTRY_EDITION_V6]       = _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPv6.dat");
+			GeoIPDBFileName[GEOIP_LOCATIONA_EDITION]        = _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPLocA.dat");
+			GeoIPDBFileName[GEOIP_ACCURACYRADIUS_EDITION]   = _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPDistance.dat");
+			GeoIPDBFileName[GEOIP_CITYCONFIDENCE_EDITION]   = _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPCityConfidence.dat");
+			GeoIPDBFileName[GEOIP_CITYCONFIDENCEDIST_EDITION]     = _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPCityConfidenceDist.dat");
+			GeoIPDBFileName[GEOIP_LARGE_COUNTRY_EDITION]    = _GeoIP_full_path_to(pdb->pCustomDir,"GeoIP.dat");
+			GeoIPDBFileName[GEOIP_LARGE_COUNTRY_EDITION_V6] = _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPv6.dat");
+			GeoIPDBFileName[GEOIP_ASNUM_EDITION_V6]		= _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPASNumv6.dat");
+			GeoIPDBFileName[GEOIP_ISP_EDITION_V6]		= _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPISPv6.dat");
+			GeoIPDBFileName[GEOIP_ORG_EDITION_V6]		= _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPOrgv6.dat");
+			GeoIPDBFileName[GEOIP_DOMAIN_EDITION_V6]	= _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPDomainv6.dat");
+			GeoIPDBFileName[GEOIP_LOCATIONA_EDITION_V6]     = _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPLocAv6.dat");
+			GeoIPDBFileName[GEOIP_REGISTRAR_EDITION]        = _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPRegistrar.dat");
+			GeoIPDBFileName[GEOIP_REGISTRAR_EDITION_V6]     = _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPRegistrarv6.dat");
+			GeoIPDBFileName[GEOIP_USERTYPE_EDITION]         = _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPUserType.dat");
+			GeoIPDBFileName[GEOIP_USERTYPE_EDITION_V6]      = _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPUserTypev6.dat");
+			GeoIPDBFileName[GEOIP_CITY_EDITION_REV0_V6]	= _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPCityv6.dat");
+			GeoIPDBFileName[GEOIP_CITY_EDITION_REV1_V6]	= _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPCityv6.dat");
+			GeoIPDBFileName[GEOIP_NETSPEED_EDITION_REV1]	= _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPNetspeedCell.dat");
+			GeoIPDBFileName[GEOIP_NETSPEED_EDITION_REV1_V6]	= _GeoIP_full_path_to(pdb->pCustomDir,"GeoIPNetseedCellv6.dat");
+		}
 	  }
+
+	return pdb;
+}
+
+const GeoIPDB * GeoIP_setup_custom_directory (const char * dir)
+{
+	GeoIPDB *pdb = (dir != NULL && *dir ? calloc(1,sizeof(GeoIPDB)) : NULL);
+
+	if(pdb != NULL)
+		pdb->pCustomDir = dir;
+
+	return _GeoIP_setup_dbfilename(pdb);
 }
 
 static
 int _file_exists(const char *file_name) {
 	struct stat file_stat;
-	return( (stat(file_name, &file_stat) == 0) ? 1:0);
+	return ( file_name != NULL && *file_name && stat(file_name, &file_stat) == 0);
 }
 
 char * _GeoIP_iso_8859_1__utf8(const char * iso) {
@@ -431,7 +442,7 @@
 			len++; 
 	}
 	len += t - iso;
-	t = p = malloc( len );
+	t = p = calloc(1, len );
 	
 	if ( p ){
 		while ( ( c = *iso++ ) ) {
@@ -462,17 +473,9 @@
   return GeoIP_is_private_ipnum_v4(ipnum);
 }
 
-int GeoIP_db_avail(int type) {
-	const char * filePath;
-	if (type < 0 || type >= NUM_DB_TYPES) {
-		return 0;
-	}
-	_GeoIP_setup_dbfilename();
-	filePath = GeoIPDBFileName[type];
-	if (NULL == filePath) {
-		return 0;
-	}
-	return _file_exists(filePath);
+int GeoIP_db_avail(const GeoIPDB *pdb, int type)
+{
+	return (pdb != NULL && type > 0 && type <= NUM_DB_TYPES && _file_exists(pdb->ppDBFileName[type]) );
 }
 
 static
@@ -500,11 +503,11 @@
 
 			if (gi->databaseType == GEOIP_REGION_EDITION_REV0) {
 				/* Region Edition, pre June 2003 */
-				gi->databaseSegments = malloc(sizeof(int));
+				gi->databaseSegments = calloc(1,sizeof(int));
 				gi->databaseSegments[0] = STATE_BEGIN_REV0;
 			} else if (gi->databaseType == GEOIP_REGION_EDITION_REV1) {
 				/* Region Edition, post June 2003 */
-				gi->databaseSegments = malloc(sizeof(int));
+				gi->databaseSegments = calloc(1,sizeof(int));
 				gi->databaseSegments[0] = STATE_BEGIN_REV1;
                        } else if (gi->databaseType == GEOIP_CITY_EDITION_REV0 ||
 				   gi->databaseType == GEOIP_CITY_EDITION_REV1 ||
@@ -531,7 +534,7 @@
  
                                    ) {
 				/* City/Org Editions have two segments, read offset of second segment */
-				gi->databaseSegments = malloc(sizeof(int));
+				gi->databaseSegments = calloc(1,sizeof(int));
 				gi->databaseSegments[0] = 0;
 
                                 segment_record_length = gi->databaseType == GEOIP_CITYCONFIDENCEDIST_EDITION ? LARGE_SEGMENT_RECORD_LENGTH : SEGMENT_RECORD_LENGTH;
@@ -572,12 +575,12 @@
 			gi->databaseType == GEOIP_PROXY_EDITION ||
 			gi->databaseType == GEOIP_NETSPEED_EDITION ||
 			gi->databaseType == GEOIP_COUNTRY_EDITION_V6 ) {
-		gi->databaseSegments = malloc(sizeof(int));
+		gi->databaseSegments = calloc(1,sizeof(int));
 		gi->databaseSegments[0] = COUNTRY_BEGIN;
 	}
         else if ( gi->databaseType == GEOIP_LARGE_COUNTRY_EDITION || 
           gi->databaseType == GEOIP_LARGE_COUNTRY_EDITION_V6 ) {
-		gi->databaseSegments = malloc(sizeof(int));
+		gi->databaseSegments = calloc(1,sizeof(int));
 		gi->databaseSegments[0] = LARGE_COUNTRY_BEGIN;
 	                        }
  
@@ -889,28 +892,26 @@
 	return ipnum + octet;
 }
 
-GeoIP* GeoIP_open_type (int type, int flags) {
-	GeoIP * gi;
-	const char * filePath;
-	if (type < 0 || type >= NUM_DB_TYPES) {
-		printf("Invalid database type %d\n", type);
+GeoIP* GeoIP_open_type (const GeoIPDB *pdb, int type, int flags)
+{
+	if (type < 0 || type >= NUM_DB_TYPES)
+	{
+		fprintf(stderr,"Error, Invalid database type %d\n", type);
 		return NULL;
 	}
-	_GeoIP_setup_dbfilename();
-	filePath = GeoIPDBFileName[type];
-	if (filePath == NULL) {
-		printf("Invalid database type %d\n", type);
+
+	if(pdb->ppDBFileName[type] == NULL)
+	{
+		fprintf(stderr,"Error, Invalid database type %d\n", type);
 		return NULL;
 	}
-	gi = GeoIP_open (filePath, flags);
-	return gi;
+
+	return GeoIP_open (pdb->ppDBFileName[type], flags);
 }
 
-GeoIP* GeoIP_new (int flags) {
-	GeoIP * gi;
-	_GeoIP_setup_dbfilename();
-	gi = GeoIP_open (GeoIPDBFileName[GEOIP_COUNTRY_EDITION], flags);
-	return gi;
+GeoIP* GeoIP_new (const GeoIPDB *pdb, int flags)
+{
+	return GeoIP_open (pdb->ppDBFileName[GEOIP_COUNTRY_EDITION], flags);
 }
 
 GeoIP* GeoIP_open (const char * filename, int flags) {
@@ -918,11 +919,14 @@
 	GeoIP * gi;
 	size_t len;
 
-	gi = (GeoIP *)malloc(sizeof(GeoIP));
+	if(filename == NULL || !*filename)
+		return NULL;
+
+	gi = (GeoIP *)calloc(1,sizeof(GeoIP));
 	if (gi == NULL)
 		return NULL;
        	len = sizeof(char) * (strlen(filename)+1);
-	gi->file_path = malloc(len);
+	gi->file_path = calloc(1,len);
 	if (gi->file_path == NULL) {
 		free(gi);
 		return NULL;
@@ -957,7 +961,7 @@
 			    }
 #endif
 			} else {
-			    gi->cache = (unsigned char *) malloc(sizeof(unsigned char) * buf.st_size);
+			    gi->cache = (unsigned char *) calloc(1,sizeof(unsigned char) * buf.st_size);
 
 			    if (gi->cache != NULL) {
 				if (pread(fileno(gi->GeoIPDatabase),gi->cache, buf.st_size, 0) != (ssize_t) buf.st_size) {
@@ -986,7 +990,7 @@
                 gi->ext_flags = 1U << GEOIP_TEREDO_BIT;
 		_setup_segments(gi);
 		if (flags & GEOIP_INDEX_CACHE) {                        
-			gi->index_cache = (unsigned char *) malloc(sizeof(unsigned char) * ((gi->databaseSegments[0] * (long)gi->record_length * 2)));
+			gi->index_cache = (unsigned char *) calloc(1,sizeof(unsigned char) * ((gi->databaseSegments[0] * (long)gi->record_length * 2)));
 			if (gi->index_cache != NULL) {
 				if (pread(fileno(gi->GeoIPDatabase),gi->index_cache, gi->databaseSegments[0] * (long)gi->record_length * 2, 0) != (size_t) (gi->databaseSegments[0]*(long)gi->record_length * 2)) {
 					fprintf(stderr,"Error reading file %s\n",filename);
@@ -1074,7 +1078,7 @@
 #endif
 	int result = 0;
 #ifdef HAVE_GETHOSTBYNAME_R
-	buf = malloc(buflength);
+	buf = calloc(1,buflength);
 #endif
 	if (addr == INADDR_NONE) {
 #ifdef HAVE_GETHOSTBYNAME_R
@@ -1143,7 +1147,7 @@
 		return 0;
 	}
 	if (gi->databaseType != GEOIP_LARGE_COUNTRY_EDITION && gi->databaseType != GEOIP_COUNTRY_EDITION && gi->databaseType != GEOIP_PROXY_EDITION && gi->databaseType != GEOIP_NETSPEED_EDITION) {
-		printf("Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_COUNTRY_EDITION]);
+		fprintf(stderr,"Error, Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_COUNTRY_EDITION]);
 		return 0;
 	}
 	if (!(ipnum = _GeoIP_lookupaddress(name)))
@@ -1160,7 +1164,7 @@
                return 0;
        }
        if (gi->databaseType != GEOIP_LARGE_COUNTRY_EDITION_V6 && gi->databaseType != GEOIP_COUNTRY_EDITION_V6) {
-               printf("Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_COUNTRY_EDITION_V6]);
+               fprintf(stderr,"Error, Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_COUNTRY_EDITION_V6]);
                return 0;
        }
         ipnum = _GeoIP_lookupaddress_v6(name);
@@ -1267,7 +1271,7 @@
        }
        if  (gi->databaseType != GEOIP_COUNTRY_EDITION_V6 
          && gi->databaseType != GEOIP_LARGE_COUNTRY_EDITION_V6) {
-               printf("Invalid database type %s, expected %s\n",
+               fprintf(stderr,"Error, Invalid database type %s, expected %s\n",
                                         GeoIPDBDescription[(int)gi->databaseType],
                                         GeoIPDBDescription[GEOIP_COUNTRY_EDITION_V6]);
                return 0;
@@ -1287,7 +1291,7 @@
             gi->databaseType != GEOIP_LARGE_COUNTRY_EDITION &&
 			gi->databaseType != GEOIP_PROXY_EDITION &&
 			gi->databaseType != GEOIP_NETSPEED_EDITION) {
-		printf("Invalid database type %s, expected %s\n",
+		fprintf(stderr,"Error, Invalid database type %s, expected %s\n",
 					 GeoIPDBDescription[(int)gi->databaseType],
 					 GeoIPDBDescription[GEOIP_COUNTRY_EDITION]);
 		return 0;
@@ -1305,7 +1309,7 @@
 */     
        if (gi->databaseType != GEOIP_COUNTRY_EDITION_V6
          && gi->databaseType != GEOIP_LARGE_COUNTRY_EDITION_V6) {
-               printf("Invalid database type %s, expected %s\n",
+               fprintf(stderr,"Error, Invalid database type %s, expected %s\n",
                                         GeoIPDBDescription[(int)gi->databaseType],
                                         GeoIPDBDescription[GEOIP_COUNTRY_EDITION_V6]);
                return 0;
@@ -1325,7 +1329,7 @@
           gi->databaseType != GEOIP_LARGE_COUNTRY_EDITION && 
 			gi->databaseType != GEOIP_PROXY_EDITION &&
 			gi->databaseType != GEOIP_NETSPEED_EDITION) {
-		printf("Invalid database type %s, expected %s\n",
+		fprintf(stderr,"Error, Invalid database type %s, expected %s\n",
 					 GeoIPDBDescription[(int)gi->databaseType],
 					 GeoIPDBDescription[GEOIP_COUNTRY_EDITION]);
 		return 0;
@@ -1367,7 +1371,7 @@
 	for (i = 0; i < DATABASE_INFO_MAX_SIZE; i++) {
 		silence = read(fno, buf, 3 );
 		if (buf[0] == 0 && buf[1] == 0 && buf[2] == 0) {
-			retval = malloc(sizeof(char) * (i+1));
+			retval = calloc(1,sizeof(char) * (i+1));
 			if (retval == NULL) {
 				return NULL;
 			}
@@ -1476,7 +1480,7 @@
 GeoIPRegion * _get_region(GeoIP* gi, unsigned long ipnum) {
 	GeoIPRegion * region;
  
-	region = malloc(sizeof(GeoIPRegion));
+	region = calloc(1,sizeof(GeoIPRegion));
 	if (region) {
 		GeoIP_assign_region_by_inetaddr(gi, htonl(ipnum), region);
 	}
@@ -1487,7 +1491,7 @@
 GeoIPRegion * _get_region_v6(GeoIP* gi, geoipv6_t ipnum) {
        GeoIPRegion * region;
  
-       region = malloc(sizeof(GeoIPRegion));
+       region = calloc(1,sizeof(GeoIPRegion));
        if (region) {
                GeoIP_assign_region_by_inetaddr_v6(gi, ipnum, region);
        }
@@ -1501,7 +1505,7 @@
 	}
 	if (gi->databaseType != GEOIP_REGION_EDITION_REV0 &&
 			gi->databaseType != GEOIP_REGION_EDITION_REV1) {
-		printf("Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_REGION_EDITION_REV1]);
+		fprintf(stderr,"Error, Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_REGION_EDITION_REV1]);
 		return 0;
 	}
 	ipnum = GeoIP_addr_to_num(addr);
@@ -1515,7 +1519,7 @@
        }
        if (gi->databaseType != GEOIP_REGION_EDITION_REV0 &&
                        gi->databaseType != GEOIP_REGION_EDITION_REV1) {
-               printf("Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_REGION_EDITION_REV1]);
+               fprintf(stderr,"Error, Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_REGION_EDITION_REV1]);
                return 0;
        }
        ipnum = _GeoIP_addr_to_num_v6(addr);
@@ -1529,7 +1533,7 @@
 	}
 	if (gi->databaseType != GEOIP_REGION_EDITION_REV0 &&
 			gi->databaseType != GEOIP_REGION_EDITION_REV1) {
-		printf("Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_REGION_EDITION_REV1]);
+		fprintf(stderr,"Error, Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_REGION_EDITION_REV1]);
 		return 0;
 	}
 	if (!(ipnum = _GeoIP_lookupaddress(name)))
@@ -1544,7 +1548,7 @@
        }
        if (gi->databaseType != GEOIP_REGION_EDITION_REV0 &&
                        gi->databaseType != GEOIP_REGION_EDITION_REV1) {
-               printf("Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_REGION_EDITION_REV1]);
+               fprintf(stderr,"Error, Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_REGION_EDITION_REV1]);
                return 0;
        }
         
@@ -1557,7 +1561,7 @@
 GeoIPRegion * GeoIP_region_by_ipnum (GeoIP* gi, unsigned long ipnum) {
 	if (gi->databaseType != GEOIP_REGION_EDITION_REV0 &&
 			gi->databaseType != GEOIP_REGION_EDITION_REV1) {
-		printf("Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_REGION_EDITION_REV1]);
+		fprintf(stderr,"Error, Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_REGION_EDITION_REV1]);
 		return 0;
 	}
 	return _get_region(gi, ipnum);
@@ -1566,7 +1570,7 @@
 GeoIPRegion * GeoIP_region_by_ipnum_v6 (GeoIP* gi, geoipv6_t ipnum) {
        if (gi->databaseType != GEOIP_REGION_EDITION_REV0 &&
                        gi->databaseType != GEOIP_REGION_EDITION_REV1) {
-               printf("Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_REGION_EDITION_REV1]);
+               fprintf(stderr,"Error, Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_REGION_EDITION_REV1]);
                return 0;
        }
        return _get_region_v6(gi, ipnum);
@@ -1595,7 +1599,7 @@
 			gi->databaseType != GEOIP_REGISTRAR_EDITION &&
 			gi->databaseType != GEOIP_LOCATIONA_EDITION
                         ) {
-		printf("Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_ORG_EDITION]);
+		fprintf(stderr,"Error, Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_ORG_EDITION]);
 		return NULL;
 	}
 
@@ -1611,7 +1615,7 @@
 	          org_buf = _GeoIP_iso_8859_1__utf8( (const char * ) buf );
 	        } else {
 		  len = sizeof(char) * (strlen(buf)+1);
-		  org_buf = malloc(len);
+		  org_buf = calloc(1,len);
 		  strncpy(org_buf, buf, len);
                 }
 	} else {
@@ -1620,7 +1624,7 @@
 	          org_buf = _GeoIP_iso_8859_1__utf8( (const char * ) buf_pointer );
 	        } else {
 		  len = sizeof(char) * (strlen(buf_pointer)+1);
-		  org_buf = malloc(len);
+		  org_buf = calloc(1,len);
 		  strncpy(org_buf, buf_pointer, len);
                 }
 	}
@@ -1645,7 +1649,7 @@
       gi->databaseType != GEOIP_REGISTRAR_EDITION_V6 &&
       gi->databaseType != GEOIP_LOCATIONA_EDITION
       ) {
-    printf("Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_ORG_EDITION]);
+    fprintf(stderr,"Error, Invalid database type %s, expected %s\n", GeoIPDBDescription[(int)gi->databaseType], GeoIPDBDescription[GEOIP_ORG_EDITION]);
     return NULL;
   }
 
@@ -1661,7 +1665,7 @@
       org_buf = _GeoIP_iso_8859_1__utf8( (const char * ) buf );
     } else {
       len = sizeof(char) * (strlen(buf)+1);
-      org_buf = malloc(len);
+      org_buf = calloc(1,len);
       strncpy(org_buf, buf, len);
     }
   } else {
@@ -1670,7 +1674,7 @@
       org_buf = _GeoIP_iso_8859_1__utf8( (const char * ) buf_pointer );
     } else {
       len = sizeof(char) * (strlen(buf_pointer)+1);
-      org_buf = malloc(len);
+      org_buf = calloc(1,len);
       strncpy(org_buf, buf_pointer, len);
     }
   }
@@ -1683,7 +1687,7 @@
 	int octet[4];
 	int num_chars_written, i;
 
-	ret_str = malloc(sizeof(char) * 16);
+	ret_str = calloc(1,sizeof(char) * 16);
 	cur_str = ret_str;
 
 	for (i = 0; i<4; i++) {
@@ -1717,7 +1721,7 @@
 		return 0;
 	}
 
-	ret = malloc(sizeof(char *) * 2);
+	ret = calloc(1,sizeof(char *) * 2);
 
 	ipnum = GeoIP_addr_to_num(addr);
 	target_value = _GeoIP_seek_record(gi, ipnum);
@@ -1936,17 +1940,26 @@
        return PACKAGE_VERSION;
 }
 
-int GeoIP_cleanup(void)
+int GeoIP_cleanup(const GeoIPDB **ppdb)
 {
 	int i, result = 0;
-	if (GeoIPDBFileName) {
+	if (ppdb != NULL && *ppdb != NULL)
+	{
+		GeoIPDB *pdb = (GeoIPDB *)*ppdb;
+
+		if(pdb->ppDBFileName != NULL)
+		{	char **ppDBFileName = (char **)pdb->ppDBFileName;
+
+			for (i = 0; i < NUM_DB_TYPES; i++)
+			{
+				if (ppDBFileName[i])
+					free(ppDBFileName[i]);
+			}
 
-		for (i = 0; i < NUM_DB_TYPES; i++) {
-			if (GeoIPDBFileName[i]) free(GeoIPDBFileName[i]);
+			free(ppDBFileName);
 		}
-
-		free(GeoIPDBFileName);
-		GeoIPDBFileName = NULL;
+		free(pdb);
+		ppdb = NULL;
 		result = 1;
 	}
 
--- ./libGeoIP/GeoIP.h	2011-06-23 15:57:02.000000000 -0500
+++ ./libGeoIP/GeoIP.h	2012-04-13 13:31:26.000000000 -0500
@@ -76,6 +76,12 @@
         unsigned int ext_flags; /* bit 0 teredo support enabled */
 } GeoIP;
 
+typedef struct GeoIPDB_t
+{
+	const char * pCustomDir;
+	const char ** ppDBFileName;
+} GeoIPDB;
+
 
 typedef enum {
   GEOIP_TEREDO_BIT = 0
@@ -173,11 +179,11 @@
 #define GEOIP_API
 #endif  /* DLL */
 
-GEOIP_API void GeoIP_setup_custom_directory(char *dir);
-GEOIP_API GeoIP* GeoIP_open_type (int type, int flags);
-GEOIP_API GeoIP* GeoIP_new(int flags);
+GEOIP_API const GeoIPDB * GeoIP_setup_custom_directory (const char * dir);
+GEOIP_API GeoIP* GeoIP_open_type (const GeoIPDB *pdb, int type, int flags);
+GEOIP_API GeoIP* GeoIP_new (const GeoIPDB *pdb, int flags);
 GEOIP_API GeoIP* GeoIP_open(const char * filename, int flags);
-GEOIP_API int GeoIP_db_avail(int type);
+GEOIP_API int GeoIP_db_avail(const GeoIPDB *pdb, int type);
 GEOIP_API void GeoIP_delete(GeoIP* gi);
 GEOIP_API const char *GeoIP_country_code_by_addr (GeoIP* gi, const char *addr);
 GEOIP_API const char *GeoIP_country_code_by_name (GeoIP* gi, const char *host);
@@ -294,7 +300,7 @@
 
 /* Cleans up memory used to hold file name paths. Returns 1 if successful; otherwise 0. 
  * */
-GEOIP_API int GeoIP_cleanup(void);
+GEOIP_API int GeoIP_cleanup(const GeoIPDB **ppdb);
 
 /* Returns the library version in use. Helpful if your loading dynamically. */
 GEOIP_API const char * GeoIP_lib_version(void);
--- ./libGeoIP/GeoIP_internal.h	2011-03-27 16:00:36.000000000 -0500
+++ ./libGeoIP/GeoIP_internal.h	2012-04-13 10:30:26.000000000 -0500
@@ -12,7 +12,6 @@
 GEOIP_API geoipv6_t _GeoIP_lookupaddress_v6 (const char *host);
 GEOIP_API int __GEOIP_V6_IS_NULL(geoipv6_t v6);
 
-GEOIP_API void _GeoIP_setup_dbfilename();
-GEOIP_API char *_GeoIP_full_path_to(const char *file_name);
+GEOIP_API char *_GeoIP_full_path_to(const char * custom_directory, const char *file_name);
 
 #endif
--- ./libGeoIP/GeoIPUpdate.c	2011-06-23 15:28:17.000000000 -0500
+++ ./libGeoIP/GeoIPUpdate.c	2012-04-13 14:50:40.000000000 -0500
@@ -24,7 +24,7 @@
 #include "GeoIP_internal.h"
 
 #include "global.h"
-#include "md5.h"
+#include "md5_local.h"
 #include <sys/types.h>
 #if !defined(_WIN32)
 #include <netinet/in.h>
@@ -119,11 +119,11 @@
 #if defined(HAVE_VASPRINTF)
   silence = vasprintf(&f_str, str, ap);
 #elif defined (HAVE_VSNPRINTF)
-  f_str = malloc(4096);
+  f_str = calloc(1,4096);
   if ( f_str )
     silence = vsnprintf(f_str, 4096, str, ap);
 #else
-  f_str = malloc(4096);
+  f_str = calloc(1,4096);
   if ( f_str )
     silence = vsprintf(f_str, str, ap);
 #endif
@@ -145,11 +145,11 @@
 #if defined(HAVE_VASPRINTF)
   silence = vasprintf(&f_str, str, params);
 #elif defined (HAVE_VSNPRINTF)
-  f_str = malloc(4096);
+  f_str = calloc(1,4096);
   if ( f_str )
     silence = vsnprintf(f_str, 4096, str, params);
 #else
-  f_str = malloc(4096);
+  f_str = calloc(1,4096);
   if ( f_str )
     silence = vsprintf(f_str, str, params);
 #endif
@@ -226,7 +226,7 @@
 	return(gethostbyname(hostname));
 }
 
-short int GeoIP_update_database (char * license_key, int verbose, void (*f)( char * )) {
+short int GeoIP_update_database (const GeoIPDB *pdb, char * license_key, int verbose, void (*f)( char * )) {
 	struct hostent *hostlist;
 	int sock;
 	char * buf;
@@ -248,16 +248,15 @@
 	int block_size = BLOCK_SIZE;
 	size_t len;
 	size_t written;
-	_GeoIP_setup_dbfilename();
 
 	/* get MD5 of current GeoIP database file */
-	if ((cur_db_fh = fopen (GeoIPDBFileName[GEOIP_COUNTRY_EDITION], "rb")) == NULL) {
-    GeoIP_printf(f,"%s%s",  NoCurrentDB, GeoIPDBFileName[GEOIP_COUNTRY_EDITION]);
+	if ((cur_db_fh = fopen (pdb->ppDBFileName[GEOIP_COUNTRY_EDITION], "rb")) == NULL) {
+    GeoIP_printf(f,"%s%s",  NoCurrentDB, pdb->ppDBFileName[GEOIP_COUNTRY_EDITION]);
 	} else {
-		md5_init(&context);
+		md5_local_init(&context);
 		while ((len = fread (buffer, 1, 1024, cur_db_fh)) > 0)
-			md5_write (&context, buffer, len);
-		md5_final (&context);
+			md5_local_write (&context, buffer, len);
+		md5_local_final (&context);
 		memcpy(digest,context.buf,16);
 		fclose (cur_db_fh);
 		for (i = 0; i < 16; i++) {
@@ -293,7 +292,7 @@
 	if (connect(sock, (struct sockaddr *)&sa, sizeof(struct sockaddr))< 0)
 		return GEOIP_CONNECTION_ERR;
 
-	request_uri = malloc(sizeof(char) * (strlen(license_key) + strlen(GeoIPHTTPRequest)
+	request_uri = calloc(1,sizeof(char) * (strlen(license_key) + strlen(GeoIPHTTPRequest)
                               + strlen(GeoIPProxyHTTP) + strlen(GeoIPProxiedHost) + 36 + 1));
 	if (request_uri == NULL)
 		return GEOIP_OUT_OF_MEMORY_ERR;
@@ -301,7 +300,7 @@
 	send(sock, request_uri, strlen(request_uri),0);
 	free(request_uri);
 
-	buf = malloc(sizeof(char) * block_size + 1);
+	buf = calloc(1,sizeof(char) * block_size + 1);
 	if (buf == NULL)
 		return GEOIP_OUT_OF_MEMORY_ERR;
 
@@ -350,10 +349,10 @@
 		GeoIP_printf(f,"Done\n");
 
 	/* save gzip file */
-	file_path_gz = malloc(sizeof(char) * (strlen(GeoIPDBFileName[GEOIP_COUNTRY_EDITION]) + 4));
+	file_path_gz = calloc(1,sizeof(char) * (strlen(pdb->ppDBFileName[GEOIP_COUNTRY_EDITION]) + 4));
 	if (file_path_gz == NULL)
 		return GEOIP_OUT_OF_MEMORY_ERR;
-	strcpy(file_path_gz,GeoIPDBFileName[GEOIP_COUNTRY_EDITION]);
+	strcpy(file_path_gz,pdb->ppDBFileName[GEOIP_COUNTRY_EDITION]);
 	strcat(file_path_gz,".gz");
 	if (verbose == 1) {
     GeoIP_printf(f, SavingGzip, file_path_gz);
@@ -381,10 +380,10 @@
 
 	/* uncompress gzip file */
 	gz_fh = gzopen(file_path_gz, "rb");
-	file_path_test = malloc(sizeof(char) * (strlen(GeoIPDBFileName[GEOIP_COUNTRY_EDITION]) + 6));
+	file_path_test = calloc(1,sizeof(char) * (strlen(pdb->ppDBFileName[GEOIP_COUNTRY_EDITION]) + 6));
 	if (file_path_test == NULL)
 		return GEOIP_OUT_OF_MEMORY_ERR;
-	strcpy(file_path_test,GeoIPDBFileName[GEOIP_COUNTRY_EDITION]);
+	strcpy(file_path_test,pdb->ppDBFileName[GEOIP_COUNTRY_EDITION]);
 	strcat(file_path_test,".test");
 	gi_fh = fopen(file_path_test, "wb");
 
@@ -420,7 +419,7 @@
 		GeoIP_printf(f,"Done\n");
 
 	if (verbose == 1) {
-    GeoIP_printf(f, WritingFile, GeoIPDBFileName[GEOIP_COUNTRY_EDITION]);
+    GeoIP_printf(f, WritingFile, pdb->ppDBFileName[GEOIP_COUNTRY_EDITION]);
 	}
 
 	/* sanity check */
@@ -470,7 +469,7 @@
 		GeoIP_printf(f,"PASS\n");
 
 	/* install GeoIP.dat.test -> GeoIP.dat */
-	err = rename(file_path_test, GeoIPDBFileName[GEOIP_COUNTRY_EDITION]);
+	err = rename(file_path_test, pdb->ppDBFileName[GEOIP_COUNTRY_EDITION]);
 	if (err != 0) {
 		GeoIP_printf(f,"GeoIP Install error while renaming file\n");
 		return GEOIP_RENAME_ERR;
@@ -482,7 +481,7 @@
 	return 0;
 }
 
-short int GeoIP_update_database_general (char * user_id,char * license_key,char *data_base_type, int verbose,char ** client_ipaddr, void (*f)( char *)) {
+short int GeoIP_update_database_general (const GeoIPDB *pdb, char * user_id,char * license_key,char *data_base_type, int verbose,char ** client_ipaddr, void (*f)( char *)) {
 	struct hostent *hostlist;
 	int sock;
 	char * buf;
@@ -537,7 +536,7 @@
 	
 	if (connect(sock, (struct sockaddr *)&sa, sizeof(struct sockaddr))< 0)
 		return GEOIP_CONNECTION_ERR;
-	request_uri = malloc(sizeof(char) * (strlen(GeoIPHTTPRequestFilename) 
+	request_uri = calloc(1,sizeof(char) * (strlen(GeoIPHTTPRequestFilename) 
                                              + strlen(GeoIPProxyHTTP) + strlen(GeoIPProxiedHost)
                                              + strlen(data_base_type) + strlen(GeoIPUpdateHost) + 1));
 	if (request_uri == NULL)
@@ -550,7 +549,7 @@
 	}
 	send(sock, request_uri, strlen(request_uri),0); /* send the request */
 	free(request_uri);
-	buf = malloc(sizeof(char) * (block_size+4));
+	buf = calloc(1,sizeof(char) * (block_size+4));
 	if (buf == NULL)
 		return GEOIP_OUT_OF_MEMORY_ERR;
 	offset = 0;
@@ -579,23 +578,23 @@
 		free(buf);
 		return GEOIP_INVALID_SERVER_RESPONSE;
 	}
-	geoipfilename = _GeoIP_full_path_to(tmpstr);
+
+	geoipfilename = _GeoIP_full_path_to(pdb != NULL ? pdb->pCustomDir : NULL,tmpstr);
 	free(buf);
 
 	/* print the database product id and the database filename */
 	if (verbose == 1){
 		GeoIP_printf(f, "database product id %s database file name %s \n",data_base_type,geoipfilename);
 	}
-	_GeoIP_setup_dbfilename();
 
 	/* get MD5 of current GeoIP database file */
 	if ((cur_db_fh = fopen (geoipfilename, "rb")) == NULL) {
     GeoIP_printf(f, NoCurrentDB, geoipfilename);
 	} else {
-		md5_init(&context);
+		md5_local_init(&context);
 		while ((len = fread (buffer, 1, 1024, cur_db_fh)) > 0)
-			md5_write (&context, buffer, len);
-		md5_final (&context);
+			md5_local_write (&context, buffer, len);
+		md5_local_final (&context);
 		memcpy(digest,context.buf,16);
 		fclose (cur_db_fh);
 		for (i = 0; i < 16; i++)
@@ -625,7 +624,7 @@
 			free(geoipfilename);
 			return GEOIP_CONNECTION_ERR;
 		}
-		request_uri = malloc(sizeof(char) * (strlen(GeoIPHTTPRequestClientIP) 
+		request_uri = calloc(1,sizeof(char) * (strlen(GeoIPHTTPRequestClientIP) 
                                                      + strlen(GeoIPProxyHTTP) 
                                                      + strlen(GeoIPProxiedHost)
                                                      + strlen(GeoIPUpdateHost) + 1 ));
@@ -641,7 +640,7 @@
 			GeoIP_printf(f, "sending request %s", request_uri);
 		}
 		free(request_uri);
-		buf = malloc(sizeof(char) * (block_size+1));
+		buf = calloc(1,sizeof(char) * (block_size+1));
 		if (buf == NULL) {
 			free(geoipfilename);
 			return GEOIP_OUT_OF_MEMORY_ERR;
@@ -664,7 +663,7 @@
 		buf[offset] = 0;
 		offset = 0;
 		ipaddress = strstr(buf, "\r\n\r\n") + 4; /* get the ip address */
-		ipaddress = malloc(strlen(strstr(buf, "\r\n\r\n") + 4)+5);
+		ipaddress = calloc(1,strlen(strstr(buf, "\r\n\r\n") + 4)+5);
 		strcpy(ipaddress,strstr(buf, "\r\n\r\n") + 4);
 		client_ipaddr[0] = ipaddress;
 		if (verbose == 1) {
@@ -677,10 +676,10 @@
 	ipaddress = client_ipaddr[0];
 
 	/* make a md5 sum of ip address and license_key and store it in hex_digest2 */
-	md5_init(&context2);
-	md5_write (&context2, (byte *)license_key, 12);//add license key to the md5 sum
-	md5_write (&context2, (byte *)ipaddress, strlen(ipaddress));//add ip address to the md5 sum
-	md5_final (&context2);
+	md5_local_init(&context2);
+	md5_local_write (&context2, (byte *)license_key, 12);//add license key to the md5 sum
+	md5_local_write (&context2, (byte *)ipaddress, strlen(ipaddress));//add ip address to the md5 sum
+	md5_local_final (&context2);
 	memcpy(digest2,context2.buf,16);
 	for (i = 0; i < 16; i++)
 		snprintf (&hex_digest2[2*i], 3, "%02x", digest2[i]);// change the digest to a hex digest
@@ -701,7 +700,7 @@
 	if (connect(sock, (struct sockaddr *)&sa, sizeof(struct sockaddr))< 0)
 		return GEOIP_CONNECTION_ERR;
 	request_uri_len = sizeof(char) * 2036;
-	request_uri = malloc(request_uri_len);
+	request_uri = calloc(1,request_uri_len);
 	if (request_uri == NULL)
 	        return GEOIP_OUT_OF_MEMORY_ERR;
 	snprintf(request_uri, request_uri_len, GeoIPHTTPRequestMD5,GeoIPProxyHTTP,GeoIPProxiedHost,hex_digest,hex_digest2,user_id,data_base_type);
@@ -713,7 +712,7 @@
 	free(request_uri);
 
 	offset = 0;
-	buf = malloc(sizeof(char) * block_size);
+	buf = calloc(1,sizeof(char) * block_size);
 	if (buf == NULL)
 		return GEOIP_OUT_OF_MEMORY_ERR;
 
@@ -762,7 +761,7 @@
 	GeoIP_printf(f, "Updating %s\n", geoipfilename);
 
 	/* save gzip file */
-	file_path_gz = malloc(sizeof(char) * (strlen(geoipfilename) + 4));
+	file_path_gz = calloc(1,sizeof(char) * (strlen(geoipfilename) + 4));
 
 	if (file_path_gz == NULL)
 		return GEOIP_OUT_OF_MEMORY_ERR;
@@ -792,12 +791,12 @@
 		GeoIP_printf(f,"Uncompressing gzip file ... ");
 	}
 
-	file_path_test = malloc(sizeof(char) * (strlen(GeoIPDBFileName[GEOIP_COUNTRY_EDITION]) + 6));
+	file_path_test = calloc(1,sizeof(char) * (strlen(pdb->ppDBFileName[GEOIP_COUNTRY_EDITION]) + 6));
 	if (file_path_test == NULL) {
 		free(file_path_gz);
 		return GEOIP_OUT_OF_MEMORY_ERR;
 	}
-	strcpy(file_path_test,GeoIPDBFileName[GEOIP_COUNTRY_EDITION]);
+	strcpy(file_path_test,pdb->ppDBFileName[GEOIP_COUNTRY_EDITION]);
 	strcat(file_path_test,".test");
 	gi_fh = fopen(file_path_test, "wb");
 	if(gi_fh == NULL) {
@@ -835,7 +834,7 @@
 
 	if (verbose == 1) {
 		len = strlen(WritingFile) + strlen(geoipfilename) - 1;
-		f_str = malloc(len);
+		f_str = calloc(1,len);
 		snprintf(f_str,len,WritingFile,geoipfilename);
 		free(f_str);
 	}
--- ./libGeoIP/GeoIPUpdate.h	2011-03-27 16:00:36.000000000 -0500
+++ ./libGeoIP/GeoIPUpdate.h	2012-04-13 14:50:24.000000000 -0500
@@ -53,10 +53,10 @@
 const char * GeoIP_get_error_message(int i);
 
 /* Original Update Function, just for MaxMind GeoIP Country database */
-	short int GeoIP_update_database (char * license_key, int verbose, void (*f)( char *));
+	short int GeoIP_update_database (const GeoIPDB *pdb, char * license_key, int verbose, void (*f)( char * ));
 
 /* More generalized update function that works more databases */
-	short int GeoIP_update_database_general (char * user_id, char * license_key,char * data_base_type, int verbose,char ** client_ipaddr, void (*f)( char *));
+	short int GeoIP_update_database_general (const GeoIPDB *pdb, char * user_id,char * license_key,char *data_base_type, int verbose,char ** client_ipaddr, void (*f)( char *));
 
 	/* experimental export */
 	int  GeoIP_fprintf(int (*f)(FILE *, char *),FILE *fp, const char *fmt, ...);
--- ./libGeoIP/Makefile.am	2011-03-27 16:00:36.000000000 -0500
+++ ./libGeoIP/Makefile.am	2012-04-13 15:09:46.000000000 -0500
@@ -1,13 +1,13 @@
 lib_LTLIBRARIES = libGeoIP.la libGeoIPUpdate.la
 
-EXTRA_DIST = Makefile.vc md5.h global.h types.h GeoIP_internal.h
+EXTRA_DIST = Makefile.vc md5_local.h global.h types.h GeoIP_internal.h
 
 AM_CPPFLAGS = -DGEOIPDATADIR=\"$(pkgdatadir)\" -Wall
 
 libGeoIP_la_SOURCES = GeoIP.c GeoIPCity.c regionName.c timeZone.c
 include_HEADERS = GeoIP.h GeoIPCity.h GeoIPUpdate.h
 
-libGeoIPUpdate_la_SOURCES = GeoIPUpdate.c md5.c
+libGeoIPUpdate_la_SOURCES = GeoIPUpdate.c md5_local.c
 
 libGeoIP_la_LDFLAGS = -version-info @GEOIP_VERSION_INFO@
 
@@ -21,7 +21,7 @@
 
 regionName.lo regionName.o: regionName.c
 
-md5.lo md5.o: md5.c
+md5_local.lo md5_local.o: md5_local.c
 
 timeZone.lo timeZone.o: timeZone.c
 
--- ./libGeoIP/Makefile.in	2011-03-27 16:26:05.000000000 -0500
+++ ./libGeoIP/Makefile.in	2012-05-19 23:34:16.510472000 -0500
@@ -76,7 +76,7 @@
 	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
 	$(libGeoIP_la_LDFLAGS) $(LDFLAGS) -o $@
 libGeoIPUpdate_la_DEPENDENCIES = libGeoIP.la
-am_libGeoIPUpdate_la_OBJECTS = GeoIPUpdate.lo md5.lo
+am_libGeoIPUpdate_la_OBJECTS = GeoIPUpdate.lo md5_local.lo
 libGeoIPUpdate_la_OBJECTS = $(am_libGeoIPUpdate_la_OBJECTS)
 DEFAULT_INCLUDES = -I.@am__isrc@
 depcomp = $(SHELL) $(top_srcdir)/depcomp
@@ -210,11 +210,11 @@
 top_builddir = @top_builddir@
 top_srcdir = @top_srcdir@
 lib_LTLIBRARIES = libGeoIP.la libGeoIPUpdate.la
-EXTRA_DIST = Makefile.vc md5.h global.h types.h GeoIP_internal.h
+EXTRA_DIST = Makefile.vc md5_local.h global.h types.h GeoIP_internal.h
 AM_CPPFLAGS = -DGEOIPDATADIR=\"$(pkgdatadir)\" -Wall
 libGeoIP_la_SOURCES = GeoIP.c GeoIPCity.c regionName.c timeZone.c
 include_HEADERS = GeoIP.h GeoIPCity.h GeoIPUpdate.h
-libGeoIPUpdate_la_SOURCES = GeoIPUpdate.c md5.c
+libGeoIPUpdate_la_SOURCES = GeoIPUpdate.c md5_local.c
 libGeoIP_la_LDFLAGS = -version-info @GEOIP_VERSION_INFO@
 libGeoIPUpdate_la_LIBADD = -lz libGeoIP.la
 all: all-am
@@ -296,7 +296,7 @@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/GeoIP.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/GeoIPCity.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/GeoIPUpdate.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/md5.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/md5_local.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/regionName.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/timeZone.Plo@am__quote@
 
@@ -558,7 +558,7 @@
 
 regionName.lo regionName.o: regionName.c
 
-md5.lo md5.o: md5.c
+md5_local.lo md5_local.o: md5_local.c
 
 timeZone.lo timeZone.o: timeZone.c
 
--- ./libGeoIP/md5.c	2011-03-27 16:00:36.000000000 -0500
+++ ./libGeoIP/md5_local.c	2012-04-13 14:46:46.000000000 -0500
@@ -47,7 +47,7 @@
 
 
 void
-md5_init( MD5_CONTEXT *ctx )
+md5_local_init( MD5_CONTEXT *ctx )
 {
   ctx->A = 0x67452301;
   ctx->B = 0xefcdab89;
@@ -223,7 +223,7 @@
  * in the message whose digest is being computed.
  */
 void
-md5_write( MD5_CONTEXT *hd, byte *inbuf, size_t inlen)
+md5_local_write( MD5_CONTEXT *hd, byte *inbuf, size_t inlen)
 {
   if( hd->count == 64 ) { /* flush the buffer */
     transform( hd, hd->buf );
@@ -236,7 +236,7 @@
   if( hd->count ) {
     for( ; inlen && hd->count < 64; inlen-- )
       hd->buf[hd->count++] = *inbuf++;
-    md5_write( hd, NULL, 0 );
+    md5_local_write( hd, NULL, 0 );
     if( !inlen )
       return;
   }
@@ -259,12 +259,12 @@
  */
 
 void
-md5_final( MD5_CONTEXT *hd )
+md5_local_final( MD5_CONTEXT *hd )
 {
   u32 t, msb, lsb;
   byte *p;
 
-  md5_write(hd, NULL, 0); /* flush */;
+  md5_local_write(hd, NULL, 0); /* flush */;
 
   t = hd->nblocks;
   /* multiply by 64 to make a byte count */
@@ -289,7 +289,7 @@
     hd->buf[hd->count++] = 0x80; /* pad character */
     while( hd->count < 64 )
       hd->buf[hd->count++] = 0;
-    md5_write(hd, NULL, 0);  /* flush */;
+    md5_local_write(hd, NULL, 0);  /* flush */;
     memset(hd->buf, 0, 56 ); /* fill next block with zeroes */
   }
   /* append the 64 bit count */
@@ -320,7 +320,7 @@
 }
 
 static byte *
-md5_read( MD5_CONTEXT *hd )
+md5_local_read( MD5_CONTEXT *hd )
 {
   return hd->buf;
 }
--- ./libGeoIP/md5.h	2011-03-27 16:00:36.000000000 -0500
+++ ./libGeoIP/md5_local.h	2012-04-13 14:45:24.000000000 -0500
@@ -34,7 +34,7 @@
   int  count;
 } MD5_CONTEXT;
 
-void md5_init( MD5_CONTEXT *ctx );
-void md5_write( MD5_CONTEXT *hd, byte *inbuf, size_t inlen);
-void md5_final( MD5_CONTEXT *hd );
+void md5_local_init( MD5_CONTEXT *ctx );
+void md5_local_write( MD5_CONTEXT *hd, byte *inbuf, size_t inlen);
+void md5_local_final( MD5_CONTEXT *hd );
 
