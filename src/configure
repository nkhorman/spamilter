#!/bin/sh

#--------------------------------------------------------------------*
#
# Developed by;
#      Neal Horman - http://www.wanlink.com
#
#      CVS:  $Id: configure,v 1.38 2014/12/31 00:51:49 neal Exp $
#
# DESCRIPTION:
#	application:	Spamilter
#	module:		configure
#
#--------------------------------------------------------------------*

tmpsed="/tmp/t.$$.1"
tmpcli="/tmp/t.$$.2"
log="config.tmp"
tmpflags="/tmp/t.$$.3"
cflagsfile="config.defs"

os="`uname -s`"
osver="`uname -r`"
case "$os" in
	SunOS)
		echobin="/usr/ucb/echo"
		;;
	*)
		echobin="echo"
		;;
esac

rm -f $tmpsed
$echobin "./configure \\" > $log

usage()
{
cat <<EOF
Usage:
	--help
	-f			- forceMakefile creation
	--debug-timestamp	- add date/time and pid stamps to debug output
	--disable-localnet-hosts	- prevent RFC1918 local network hosts from bypassing all filter rules
	--path-config		- path to spamilter.conf (default = /etc/spamilter.rc)
	--sendmail-dir		- directory prefix of previously compiled sendmail source
	--with-aliases		- compile in support for rejecting recpients not listed in aliases table
	--with-dbl		- compile in support for rejecting based on Domain name Black List checking
	--with-fwdhostchk	- compile in support for recipient forwarding host checking
	--with-greylist		- compile the greydbd grey listing daemon ( requires --with-postgresql )
	--with-geoip		- compile in support for GeoIP CC checking
	--with-libdb		- directory prefix of previously compiled db source - use this if your system doesn't include libdb
	--with-libspf-builtin	- compile in support for libspf using builtin libspf
	--with-libspf2-builtin	- compile in support for libspf2 using builtin libspf
	--with-localuser	- compile in support for rejecting recpients not listed in local user database
	--with-pam		- compile in support for pam for ipfwmtad (for use on FreeBSD)
	--with-popauth		- compile in support for pop after smtp
	--with-postgresql	- directory prefix of previously compiled PostgreSql source
	--with-tables-flatfile	- use ascii flat files for data tables
	--with-tables-pgsql	- use PostgreSql for data tables ( requires --with-postgresql )
	--with-virtuser		- compile in support for rejecting recpients not listed in virtusertable
	--with-auto-whitelist	- compile in support for automatically white listing outbound recipients
EOF
	case "$os" in
		FreeBSD)
cat <<EOF
	--disable-useipfwdirect	- use system() calls to ipfw instead of the ipfw api
EOF
		;;
# depricated - we carry more patches, than are generally available in any installed version
#	--with-libspf		- compile in support for libspf using specified libspf directory
		*)
cat <<EOF
	--with-libbind		- directory prefix of previously compiled bind source
	--need-libutil		- use local copy of libutil
	--need-nscompat		- use local name resolver compatibility layer
	--need-vasprintf	- use local implementation of v/asprintf
EOF
		;;
	esac
}

Not()
{
	$echobin "s/<NOT_$1 \([^>]*\)>/\1 /g" >> $tmpsed
	$echobin "s/<NOT_$1>/<ALL>/g" >> $tmpsed
}

Has()
{
	$echobin "s/<$1 \([^>]*\)>/\1 /g" >> $tmpsed
	$echobin "s/<$1>/<ALL>/g" >> $tmpsed
}

Include()
{
	Has INC_$1
}

With()
{
	Has WITH_$1
}

TagLine()
{
if [ "$2" != "" ]; then cat<<EOF >> $tmpsed
/<$1>/s/<[Xx]>/$2/
s/<$1>/<ALL>/
EOF
fi
}

CheckDir()
{
	if [ ! -d "$2" ]; then
		$echobin "$1 \"$2\" does not exist, no action taken."
		exit 0;
	fi
}

SedifyDir()
{
	$echobin "$@" | sed -e's/[\./ ]/\\&/g'
}

CFlags()
{
	theDefine="${1}"
	theValue="${2}"
	if [ -z "${theValue}" ]; then
		theValue="1"
	fi
	$echobin "#undef ${theDefine}" >> $tmpflags

	if [ "${theValue}" != "0" ]; then
		$echobin "#define ${theDefine} ${theValue}" >> $tmpflags
	fi
}

ConfigSwitch()
{
	local theflag="$1"; shift
	local info="$1"; shift
	local theValue="$1"

	$echobin "${info} \\" >> $log
	CFlags ${theflag} ${theValue}
	$echobin "${info}" >> $tmpcli
}

ConfigSwitchWith()
{
	local theflag="$1"; shift
	local info="$@"
	ConfigSwitch "SUPPORT_${theflag}" "${info}"
	With "${theflag}"
}

if [ "$1" = "" ]; then usage; exit 0; fi

CFlags "ALLOW_LOCALNET_HOSTS"
CFlags "USEIPFWDIRECT"
rcfilepath="/etc/spamilter.rc"
CFlags "PATH_CONFIG" "\"${rcfilepath}\""

while [ "$1" != "" ]; do
	case "$1" in
		-f)
			$echobin "$1 \\" >> $log
			if [ -f Makefile ]; then
				make distclean || rm -f Makefile
			fi
			;;
		--sendmail-dir)
			if [ "$2" = "" ]; then
				$echobin "Missing --sendmail-dir directory paramater";
				exit 1;
			fi
			$echobin "$1 $2 \\" >> $log
			CheckDir "$1" "$2"
			smdir=$2
			shift
			;;
		--debug-timestamp)
			ConfigSwitch "DEBUG_TIMESTAMP" "$1"
			;;
		--with-popauth)
			ConfigSwitchWith "POPAUTH" "$1"
			;;
		--with-virtuser)
			ConfigSwitchWith "VIRTUSER" "$1"
			;;
		--with-aliases)
			ConfigSwitchWith "ALIASES" "$1"
			;;
		--with-localuser)
			ConfigSwitchWith "LOCALUSER" "$1"
			;;
# depricated - we carry more patches, than are generally available in any installed version
#		--with-libspf)
#			libspfdir="$2"
#			CheckDir "$1" "$2/src/libspf"
#			CheckDir "$1" "$2/lib"
#			x="`SedifyDir ${libspfdir}`"
#			TagLine "LIBSPFDIR" $x
#			ConfigSwitchWith "LIBSPF" "$1 ${libspfdir}"
#			shift
#			;;
		--with-libspf-builtin)
			libspfdir="libspf/build"
			TagLine "PKGLIBSPF" ALL
			x="`SedifyDir ${libspfdir}`"
			TagLine "LIBSPFDIR" "$x"
			ConfigSwitchWith "LIBSPF" "$1"
			;;
		--with-libspf2-builtin)
			$echobin "s/WITH_LIBSPF/WITH_LIBSPF2/g" >> $tmpsed
			libspfdir="libspf/build2/src"
			TagLine "PKGLIBSPF2" ALL
			x="`SedifyDir ${libspfdir}`"
			TagLine "LIBSPF2DIR" "$x"
			ConfigSwitchWith "LIBSPF2" "$1"
			;;
		--with-pam)
			ConfigSwitchWith "PAM" "$1"
			;;
		--with-libbind)
			if [ "$2" = "" ]; then
				$echobin "Missing --with-libbind directory paramater";
				exit 1;
			fi
			incdirs="-I`SedifyDir $2/include` $incdirs"
			libdirs="-L`SedifyDir $2/lib` $libdirs"
			libs="-lbind $libs"
			CheckDir "$1" "$2/include"
			CheckDir "$1" "$2/lib"
			shift
			;;
		--with-libdb)
			if [ "$2" = "" ]; then
				$echobin "Missing --with-libdb directory paramater";
				exit 1;
			fi
			$echobin "$1 $2 \\" >> $log
			incdirs="-I`SedifyDir $2/include` $incdirs"
			libdirs="-L`SedifyDir $2/lib` $libdirs"
			libs="-ldb $libs"
			CheckDir "$1" "$2/include"
			CheckDir "$1" "$2/lib"
			$echobin "$1 $2" >> $tmpcli
			shift
			;;
		--with-postgresql)
			case "$2" in
				-[a-z]*|"")
					# find pg_config
					OS="`uname -s`"
					PG_CONFIG="`which pg_config`"
					FIND_ROOTPATH="/"
					if [ "$OS" == "Darwin" -a -d "/Applications" ]; then
						FIND_ROOTPATH="/Applications";
					fi
					if [ -z "$PG_CONFIG" -a ! -e "pg_config.loc" ]; then
						find $FIND_ROOTPATH -name pg_config > pg_config.loc;
					fi
					if [ -e "pg_config.loc" ]; then
						psql_dir="`cat pg_config.loc`"
						psql_dir="`dirname $psql_dir`"
						psql_dir="`dirname $psql_dir`"
					fi
					arg2=""
					;;
				*)
					psql_dir="$2"
					arg2="$2"
					shift
					;;
			esac

			if [ -z "$psql_dir" ]; then
				$echobin "Missing --with-postgresql directory paramater";
				exit 1;
			fi
			x="`SedifyDir $psql_dir`"
			TagLine "PGSQLDIR" "$x"
			CheckDir "$1" "$psql_dir/include"
			CheckDir "$1" "$psql_dir/lib"
			ConfigSwitchWith "PGSQL" "$1 $arg2"
			;;
		--with-greylist)
			ConfigSwitchWith "GREYLIST" "$1"
			TagLine "PKGGREYLIST" ALL
			;;
		--with-fwdhostchk)
			ConfigSwitchWith "FWDHOSTCHK" "$1"
			;;
		--with-geoip)
			x="`SedifyDir 1.4.8`"
			TagLine "GEOIPDIR" $x
			TagLine "PKGGEOIP" ALL
			ConfigSwitchWith "GEOIP" "$1"
			;;
		--with-tables-flatfile)
			ConfigSwitchWith "TABLE_FLATFILE" "$1"
			TagLine "SUPPORTTABLEFLAT" ALL
			havetable="1"
			;;
		--with-tables-pgsql)
			ConfigSwitchWith "TABLE_PGSQL" "$1"
			TagLine "SUPPORTTABLEPGSQL" ALL
			havetable="1"
			;;
		--with-dbl)
			ConfigSwitchWith "DBL" "$1"
			;;
		--with-auto-whitelist)
			ConfigSwitchWith "AUTO_WHITELIST" "$1"
			;;
		--need-libutil)
			ConfigSwitch "NEED_LIBUTIL_LOCAL" "$1"
			TagLine "NEED_LIBUTIL_LOCAL" ALL
			;;
		--need-vasprintf)
			ConfigSwitch "WITH_VASPRINTF" "$1"
			CFlags "NEED_NSTRING" "1"
			;;
		--need-nscompat)
			ConfigSwitch "WITH_NSCOMPAT" "$1"
			;;
		--disable-localnet-hosts)
			ConfigSwitch "ALLOW_LOCALNET_HOSTS" "$1" "0"
			;;
		--disable-useipfwdirect)
			ConfigSwitch "USEIPFWDIRECT" "$1" "0"
			;;
		--path-config)
			if [ "$2" = "" ]; then
				$echobin "Missing --path-config file pathname parameter";
				exit 1;
			fi
			$echobin "$1 $2 \\" >> $log
			CheckDir "$1" "`dirname $2`"
			$echobin "$1 $2" >> $tmpcli
			CFlags "PATH_CONFIG" "\"${2}\""
			rcfilepath="${2}"
			shift
			;;
		--help)
			usage;
			exit 0;
			;;
		*)
			$echobin "Unsupported configure paramenter \"$1\""
			usage;
			exit 0;
			;;
	esac
	shift
done

if [ -f Makefile ]; then
	$echobin "Makefile exists, no action taken."
	$echobin "Use configure -f to rebuild the Makefile";
	exit 0;
else
#	osbsd="`uname -s|sed -e's/^.*[Bb][Ss][Dd]/BSD/'`"
	CFlags "OS_${os}"
	case "$os" in
		FreeBSD)
			if [ -z "${smdir}" ]; then
				smdir="/usr/src/contrib/sendmail"
			fi
			Has "BSD"
			CFlags "HAVE_SETPROCTITLE"
			;;
		SunOS)
			smobj="$os.`uname -r`.`uname -m|sed -e's/.$//'`"
			$echobin "s/<SMOBJDIR>/$smobj/g" >> $tmpsed
			Not "FreeBSD"
			Not "BSD"
			;;
		OpenBSD)
			smobj="$os.`uname -r`.`uname -m`"
			$echobin "s/<SMOBJDIR>/$smobj/g" >> $tmpsed
			Not "FreeBSD"
			Has "BSD"
			;;
		Linux)
			smobj="$os.`uname -r`.`uname -m`"
			$echobin "s/<SMOBJDIR>/$smobj/g" >> $tmpsed
			Not "FreeBSD"
			Not "BSD"
			CFlags "NEED_GETPROGNAME" "1"
			TagLine "CFLAGS" -D_GNU_SOURCE
			CFlags "HAVE_SETPROCTITLE"
			;;
		HP-UX)
			smobj="$os.`uname -r`.`uname -m`"
			$echobin "s/<SMOBJDIR>/$smobj/g" >> $tmpsed
			Not "FreeBSD"
			Not "BSD"
			;;
		Darwin)
			smobj="$os.`uname -r`.`uname -m`"
			$echobin "s/<SMOBJDIR>/$smobj/g" >> $tmpsed
			Not "FreeBSD"
			Not "BSD"
			CFlags "HAVE_SETPROCTITLE"
			;;
		*)
			$echobin "Unknown OS $os"
			exit 0;
			;;
	esac

if [ -z "$havetable" ]; then
	$echobin "Error - You must use either --with-tables-flatfile or --with-tables-pgsql"
	exit 0
fi

CheckDir "--sendmail-dir" "$smdir"

$echobin "Creating Makefile for $os"
$echobin "--sendmail-dir $smdir"
if [ -f $tmpcli ]; then cat $tmpcli; fi
$echobin ""
rm -f $tmpcli

$echobin " \$@" >> $log
cp $log config.log
rm -f $log

smdir="`SedifyDir $smdir`"
TagLine "SMDIR" "$smdir"

x="`SedifyDir ${rcfilepath}`"
TagLine "RCFILEPATH" "$x"

TagLine "INCDIRS" "$incdirs"
TagLine "LIBDIRS" "$libdirs"
TagLine "LIBS" "$libs"

Include $os

# Filter out <INC_....> sections that are not expanded
# Filter out <WITH_....> sections that are not expanded
# Filter out all lines that are not tagged with <ALL> or the os name.
cat <<EOF >> $tmpsed
s/<NOT_\([^>]*\)>//g
s/<INC_\([^>]*\)>//g
s/<WITH_\([^>]*\)>//g
/^<ALL>/{
s/<[^>]*>//g
p
}
/^<$os>/{
s/<[^>]*>//g
p
}
EOF

cat <<EOF > Makefile
 #--------------------------------------------------------------------*
 #
 # WARNING! - any changes you make to this file will be lost the next
 # time you run configure.
 #
EOF

sed -n -f $tmpsed Makefile.tmpl >> Makefile
rm -f $tmpsed

cat <<EOF > $cflagsfile
// ***
// * WARNING! - any changes you make to this file
// * will be lost the next time you run configure.
// ***
EOF
cat $tmpflags >> $cflagsfile
rm -f $tmpflags

for file in dupelocal.inc hndlrs_contentfilter_local.inc; do
	if [ ! -f "$file" ]; then touch "$file"; fi
done

fi # if [ -f Makefile ]; then
